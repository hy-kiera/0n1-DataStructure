// BAEKJOON 4963번
// 정사각형으로 이루어져 있는 섬과 바다 지도가 주어진다.
// 한 정사각형과 가로, 세로 또는 대각선으로 연결되어 있는 사각형은 걸어갈 수 있는 사각형이다.
// 두 정사각형이 같은 섬에 있으려면, 한 정사각형에서 다른 정사각형으로 걸어서 갈 수 있는 경로가 있어야 한다.
// 지도는 바다로 둘러쌓여 있으며, 지도 밖으로 나갈 수 없다.

// 입력
// 입력은 여러 개의 테스트 케이스로 이루어져 있다.
// 각 테스트 케이스의 첫째 줄에는 지도의 너비 w와 높이 h가 주어진다.
// w와 h는 50보다 작거나 같은 양의 정수이다.
// 둘째 줄부터 h개 줄에는 지도가 주어진다. 1은 땅, 0은 바다이다.
// 입력의 마지막 줄에는 0이 두 개 주어진다.

// 출력
// 각 테스트 게이스에 대해서 섬의 개수를 출력한다.

#include <cstdio>
#include <algorithm>
#include <queue>
#include <vector>

using namespace std;

int mat[501][501];  //	[y좌표][x좌표]
int m, n;
int dir[8][2]={{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,-1},{1,-1},{-1,1}};  //하 상 우 좌

void dfs(int y, int x){
	for(int i=0;i<8;i++){
		int yy=y+dir[i][0], xx=x+dir[i][1];
		if(yy<0 || yy>=m || xx<0 || xx>=n) continue;
		if(mat[yy][xx]==1){
			mat[yy][xx]=0;
			dfs(yy,xx);
		}
	}
}

int bfs(int sy, int sx){
	int ret=0;
	queue <pair<int, int> > q;
	q.push(make_pair(sy,sx));
	mat[sy][sx]=0;
	ret++;
	while(!q.empty()){
		int y=q.front().first, x=q.front().second;
		q.pop();
		for(int i=0;i<8;i++){
			int yy=y+dir[i][0], xx=x+dir[i][1];
			if(yy<0 || yy>=n || xx<0 || xx>=m) continue;
			if(mat[yy][xx]==1){
				q.push(make_pair(yy,xx));
				mat[yy][xx]=0;
				ret++;
			}
		}
	}
	for(int i=0;i<4;i++){
		for(int j=0;j<5;j++){
			printf("%d ", mat[i][j]);
		}
		printf("\n");
	}
	return ret;
}

vector <int> v;

int main(){
	while(1){
		int ans=0;
		scanf("%d %d",&n,&m);
		if(n==0 && m==0){
			break;
		}
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				scanf("%d",&mat[i][j]);
			}
		}
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				if(mat[i][j]==1){

					mat[i][j]=0;
					dfs(i,j);
					ans++;

					// ans++;
					// bfs(i,j);
				}
			}
		}
		v.push_back(ans);
	}

	for(int i=0;i<v.size();i++){
		printf("%d\n", v[i]);
	}
	return 0;
}

