// BAEKJOON 1068번
// 트리에서 리프 노드란, 자식의 개수가 0인 노드를 말한다.
// 트리가 주어지고 노드 중 하나를 제거할 때, 남은 트리에서 리프 노드의 개수를 구하기.

// 입력
// 첫째 줄에 트리의 노드의 개수 N이 주어진다. N은 50보다 작거나 같은 자연수이다.
// 둘째 줄에는 0번 노드부터 N-1번 노드까지, 각 노드의 부모가 주어진다.
// 만약 부모가 없다면 (루트) -1이 주어진다.
// 셋째 줄에는 지울 노드의 번호가 주어진다.

// 출력
// 첫째 줄에 입력으로 주어진 트리에서 입력으로 주어진 노드를 지웠을 때, 리프 노드의 개수를 출력

#include <cstdio>
#include <vector>

using namespace std;

vector<vector<int> > tree(51);

int cnt;

void order(int root, int d){
	if(tree[root].size()==0){
		cnt++;
	}
	for(int i=0;i<tree[root].size();i++){
		if(d!=tree[root][i]){
			order(tree[root][i], d);
		}
		if(tree[root].size()==1 && d==tree[root][i]){
			cnt++;
		}
	}
}

int main(){
	int n, root;
	scanf("%d", &n);
	for(int i=0;i<n;i++){
		int x;
		scanf("%d",&x);
		if(x==-1) root=i;
		else tree[x].push_back(i);
	}
	int d;
	scanf("%d",&d);

	if(d!=root){
		order(root, d);
		printf("%d\n",cnt);
	}
	else{
		printf("0\n");
	}

	return 0;
}
