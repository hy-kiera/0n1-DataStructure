// BAEKJOON 2178번
// NxM크기의 배역로 표현되는 미로가 있다.
// 미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다.
// 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하기.
// 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

// 입력
// 첫째 줄에 두 정수 N, M(2≤N, M≤100)이 주어진다.
// 다음 N개의 줄에는 M개의 정수로 미로가 주어진다.
// 각각의 수들은 붙어서 입력으로 주어진다.

// 출력
// 첫째 줄에 지나야 하는 최소의 칸 수를 출력한다.

#include <cstdio>
#include <algorithm>
#include <queue>

using namespace std;

int n,m;
int mat[101][101];
int dir[4][2]={{1,0},{-1,0},{0,1},{0,-1}};

int bfs(int sy, int sx){
	queue<pair<int,int> > q;
	q.push(make_pair(sy,sx));
	mat[sy][sx]=2;
	while(!q.empty()){
		int y=q.front().first, x=q.front().second;
		q.pop();
		for(int i=0;i<4;i++){
			int yy=y+dir[i][0], xx=x+dir[i][1];
			if(yy<0 || yy>=n || xx<0 || xx>=m) continue;
			if(mat[yy][xx]==1){
				mat[yy][xx]=mat[y][x]+1;
				q.push(make_pair(yy,xx));
			}
		}
	}
	return mat[n-1][m-1]-1;
}

int main(){
	scanf("%d %d", &n,&m);

	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			scanf("%1d",&mat[i][j]);  //한글자씩 받기 %1d
		}
	}
	printf("%d\n", bfs(0,0));

	return 0;
}
