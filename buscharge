// BAEKJOON 1916번
// n(1≤n≤1,000)개의 도시와 한 도시에서 출발하여 다른 도시에 도착하는 m(1≤m≤100,000)개의 버스가 있다.
// 우리는 A번째 도시에서 B번째 도시까지 가는데 드는 버스 비용을 최소화 시키려고 한다.

// 입력
// 첫째 줄에 도시의 개수 n(1≤n≤1,000)이 주어지고 둘째 줄에는 버스의 개수 m(1≤m≤100,000)이 주어진다.
// 셋째 줄부터 m+2줄까지 다음과 같은 버스의 정보가 주어진다.
// 1. 그 버스의 출발 도시의 번호가 주어진다.
// 2. 도착지의 도시 번호가 주어지고 또 그 버스 비용이 주어진다.
// 버스 비용은 0보다 크거나 같고, 100,000보다 작은 정수이다.
// 3. m+3째 줄에는 우리가 구하고자 하는 구간 출발점의 도시번호와 도착점의 도시번호가 주어진다.

// 출력
// 첫째 줄에 출발 도시에서 도착 도시까지 가는데 드는 최소 비용을 출력한다.

#include <cstdio>
#include <queue>
#include <vector>
#define INF 987654321

using namespace std;

int n, m, s, e;
vector <vector <pair<int, int> > > mat(20017);

vector<int> dijkstra(int s){
	priority_queue <pair<int,int>, vector <pair<int,int> >, greater<pair <int,int> > > pq; //가려는 점까지 드는 비용, 가려는 점
	pq.push(make_pair(0,s)); //처음 비용, 현재 위치한 점
	vector <int> dist(n+1, INF);
	dist[s]=0;
	while(!pq.empty()){
		int cost = pq.top().first, here = pq.top().second;
		pq.pop();
		if(dist[here]<cost) continue;
		for(int i=0;i<mat[here].size();i++){
			int nextcost= cost + mat[here][i].second;
			int there=mat[here][i].first;
			if(dist[there]>nextcost){
				dist[there]=nextcost;
				pq.push(make_pair(nextcost,there));
			}
		}
	}
	return dist;
}

int main(){
	scanf("%d %d",&n,&m);

	for(int i=0;i<m;i++){
		int u, v, w;
		scanf("%d %d %d", &u,&v,&w);
		mat[u].push_back(make_pair(v,w));
	}
	scanf("%d %d",&s,&e);

	vector<int> dist=dijkstra(s);
	// printf("%d", dist[e]);

	return 0;
}
