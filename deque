// BAEKJOON 10866번
// push_front X: 정수 X를 덱의 앞에 넣는다.
// push_back X: 정수 X를 덱의 뒤에 넣는다.
// pop_front: 덱의 가장 앞에 있는 수를 빼고, 그 수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
// pop_back: 덱의 가장 뒤에 있는 수를 빼고, 그 수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
// size: 덱에 들어있는 정수의 개수를 출력한다.
// empty: 덱이 비어있으면 1을, 아니면 0을 출력한다.
// front: 덱의 가장 앞에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
// back: 덱의 가장 뒤에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.

// 입력
// 첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다.
// 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다.
// 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다.

// 출력
// 출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.

#include <string>
#include <cstdio>
#include <iostream>
#include <deque>

using namespace std;

int main(){
	int N;

	scanf("%d", &N);
	deque <int> dq;

	for(int i=0;i<N;i++){
		string s;
		cin >> s;
		if(s == "push_front"){
			int x;
			scanf("%d",&x);
			dq.push_front(x);
			}
		if(s == "push_back"){
			int x;
			scanf("%d",&x);
			dq.push_back(x);
		}
		if(s == "pop_front"){
			if(dq.empty()){
				printf("-1\n");
			}
			else{
				printf("%d\n", dq.front());
				dq.pop_front();
			}
		}
		if(s == "pop_back"){
			if(dq.empty()){
				printf("-1\n");
			}
			else{
				printf("%d\n", dq.back());
				dq.pop_back();
			}
		}
		if(s == "size"){
			printf("%lu\n", dq.size());
		}
		if(s == "empty"){
			printf("%d\n", dq.empty()? 1:0);  //A? 1:0 A가 참이면 1, 거짓이면 0
		}
		if(s == "front"){
			printf("%d\n", dq.empty()? -1:dq.front());
		}
		if(s == "back"){
			printf("%d\n", dq.empty()? -1:dq.back());
		}
	}
	return 0;
}
