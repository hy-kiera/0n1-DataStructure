// BAEKJOON 1926번
// 어떤 큰 도화지에 그림이 그려져 있을 때, 그 그림의 개수와, 그 그림 중 넓이가 가장 넓은 것의 넓이를 출력하여라.
// 단, 그림이라는 것은 1로 연결된 것을 한 그림이라고 정의하자.
// 가로나 세로로 연결된 것은 연결이 된 것이고 대각선으로 연결이 된 것은 떨어진 그림이다.

// 입력
// 첫째 줄에 도화지의 세로 크기 n(1<=n<=500)과 가로 크기 m(1<=m<=500)이 차례로 주어진다.
// 두 번째 줄부터 n+1 줄 까지 그림의 정보가 주어진다.
// 단, 그림의 정보는 0과 1이 공백을 두고 주어지며, 0은 색칠이 안된 부분, 1은 색칠이 된 부분을 의미한다.

// 출력
// 첫째 줄에는 그림의 개수, 둘째 줄에는 그 중 가장 넓은 그림의 넓이를 출력.

#include <cstdio>
#include <algorithm>
#include <queue>

using namespace std;

int mat[501][501];  //	[y좌표][x좌표]
int m, n, ans1, ans2, sum;
int dir[4][2]={{1,0},{-1,0},{0,1},{0,-1}};  //하 상 우 좌

void dfs(int y, int x){
	for(int i=0;i<4;i++){
		int yy=y+dir[i][0], xx=x+dir[i][1];
		if(yy<0 || yy>=n || xx<0 || xx>=m) continue;
		if(mat[yy][xx]==1){
			mat[yy][xx]=0;
			sum++;
			dfs(yy,xx);
		}
	}
}

int bfs(int sy, int sx){
	int ret=0;
	queue <pair<int, int> > q;
	q.push(make_pair(sy,sx));
	mat[sy][sx]=0;
	ret++;
	while(!q.empty()){
		int y=q.front().first, x=q.front().second;
		q.pop();
		for(int i=0;i<4;i++){
			int yy=y+dir[i][0], xx=x+dir[i][1];
			if(yy<0 || yy>=n || xx<0 || xx>=m) continue;
			if(mat[yy][xx]==1){
				q.push(make_pair(yy,xx));
				mat[yy][xx]=0;
				ret++;
			}
		}
	}
	return ret;
}

int main(){
	scanf("%d %d",&n,&m);

	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			scanf("%d",&mat[i][j]);
		}
	}
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
			if(mat[i][j]==1){

				ans1++;
				sum=0;
				mat[i][j]=0;
				sum++;
				dfs(i,j);
				ans2=max(sum, ans2);

				// ans1++;
				// ans2=max(ans2,bfs(i,j));
			}
		}
	}
	printf("%d\n%d\n", ans1, ans2);

	return 0;
}
