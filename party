// BAEKJOON 1238번
// N개의 숫자로 구분된 각각의 마을에 한 명의 학생이 살고 있다.
// 어느 날 이 N명의 학생이 X (1 ≤ X ≤ N)번 마을에 모여서 파티를 벌이기로 했다.
// 이 마을 사이에는 총 M개의 단방향 도로들이 있고 i번째 길을 지나는데 Ti(1 ≤ Ti ≤ 100)의 시간을 소비한다.
// 각각의 학생들은 파티에 참석하기 위해 걸어가서 다시 그들의 마을로 돌아와야 한다.
// N명의 학생들 중 오고 가는데 가장 많은 시간을 소비하는 학생은 누구일지 구하기.

// 입력
// 첫째 줄에 N(1 <= N <= 1,000), M(1 <= M <= 10,000), X가 공백으로 구분되어 입력된다.
// 두 번째 줄부터 M+1번째 줄까지 i번째 도로의 시작점, 끝점, 그리고 이 도로를 지나는데 필요한 소요시간 Ti가 들어온다.

// 출력
// 첫 번째 줄에 N명의 학생들 중 오고 가는데 가장 오래 걸리는 학생의 소요시간을 출력한다.

#include <cstdio>
#include <queue>
#include <vector>
#include <algorithm>
#define INF 987654321

using namespace std;
int N, M, X; //학생 수(=마을 수), 단방향 도로 수, 모이는 마을 번호
vector <vector <pair<int, int> > > mat(20017);

vector<int> dijkstra(int s){
	priority_queue <pair<int,int>, vector <pair<int,int> >, greater<pair <int,int> > > pq; //가려는 점까지 드는 비용, 가려는 점
	pq.push(make_pair(0,s)); //처음 비용, 현재 위치한 점
	vector <int> dist(N+1, INF);
	dist[s]=0;
	while(!pq.empty()){
		int cost = pq.top().first, here = pq.top().second;
		pq.pop();
		if(dist[here]<cost) continue;
		for(int i=0;i<mat[here].size();i++){
			int nextcost= cost + mat[here][i].second;
			int there=mat[here][i].first;
			if(dist[there]>nextcost){
				dist[there]=nextcost;
				pq.push(make_pair(nextcost,there));
			}
		}
	}
	return dist;
}

int main(){
	scanf("%d %d %d", &N,&M,&X);

	for(int i=0;i<M;i++){
		int s, e, t;
		scanf("%d %d %d", &s,&e,&t);
		mat[s].push_back(make_pair(e,t));
	}

	vector <int> s2X;
	vector <int> X2s;
	vector <int> res;
	for(int i=1;i<=N;i++){
		s2X=dijkstra(i);
		X2s=dijkstra(X);

		res.push_back(s2X[X]+X2s[i]);
	}
	sort(res.begin(), res.end());

	printf("%d", res[N-1]);

	return 0;
}
